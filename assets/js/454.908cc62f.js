(window.webpackJsonp=window.webpackJsonp||[]).push([[454],{1191:function(t,a,s){t.exports=s.p+"assets/img/05_github_6.ea07d349.png"},1192:function(t,a,s){t.exports=s.p+"assets/img/05_github_5.cfea84d0.png"},1193:function(t,a,s){t.exports=s.p+"assets/img/05_github_4.918c3e0a.png"},1194:function(t,a,s){t.exports=s.p+"assets/img/05_github_3.99e6c4da.png"},1195:function(t,a,s){t.exports=s.p+"assets/img/05_github_2.9ba4cd9f.png"},1196:function(t,a,s){t.exports=s.p+"assets/img/05_github_1.9f484396.png"},1617:function(t,a,s){"use strict";s.r(a);var e=[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"代码托管"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码托管","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码托管")]),e("p",[t._v("在这一节中，我们将会学习：")]),e("ul",[e("li",[t._v("什么是 Git ？")]),e("li",[t._v("如何为 Git 做初始化配置？")]),e("li",[t._v("Git 的基本使用；")]),e("li",[t._v("什么是 GitHub？")]),e("li",[t._v("如何添加 SSH Key 到 GitHub  上？")]),e("li",[t._v("如何新建 GitHub 项目？")]),e("li",[t._v("如何提交代码到 GitHub？")])]),e("h2",{attrs:{id:"什么是-git？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-git？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 Git？")]),e("p",[t._v("Git 是 Linux 的创始人 Linus Torvalds 开源的一款分布式版本控制系统，以帮助开发者更好的对项目进行版本管理。每一个优秀的开发者在进行项目开发时都会第一时间给自己的项目加上 Git，以便能更好的追踪代码修改，进行版本回溯等操作。在多人协作的开发过程中，Git 更是必不可少的。因此，本书中将使用 Git 来管理项目的所有代码，让你在阅读本书的时候能够体会到 Git 的强大，了解实际开发中我们对 Git 的应用。")]),e("p",[t._v("在现代化的项目开发中，Git 基本上是标配。")]),e("h2",{attrs:{id:"git-的基本设置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的基本设置","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 的基本设置")]),e("p",[t._v("在前面的章节中，我们为主机安装好了 Git。虚拟机 Homestead 中 Git 也是作为默认安装的软件。接下来大部分的 Git 操作都会发生在 Homestead 虚拟机中，因此我们需要先对其进行设置。")]),e("p",[t._v("首先我们对 Git 进行用户名和邮箱进行设置，请参照下面格式，替换为你自己常用的用户名和邮箱来完成设置：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),e("span",{attrs:{class:"token string"}},[t._v('"Your Name"')]),t._v("\n$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email your@example.com\n")])]),e("blockquote",[e("p",[t._v("解释： "),e("code",[t._v("--global")]),t._v(" 选项代表对 Git 进行全局设置。")])]),e("p",[t._v("这里个人信息设置的作用，是为你在代码提交时自动署名标记，方便查看提交日志时区分作者。如：")]),e("p",[e("img",{attrs:{src:s(1196),alt:"file"}})]),e("p",[t._v("接下来设置 Git 推送分支时相关配置：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global push.default simple\n")])]),e("p",[t._v("此设置是 Git 命令 push 的默认模式为 "),e("code",[t._v("simple")]),t._v("，当我们执行 "),e("code",[t._v("git push")]),t._v(" 没有指定分支时，自动使用当前分支，而不是报错。")]),e("h2",{attrs:{id:"git-初体验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-初体验","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 初体验")]),e("p",[t._v("对于有经验的开发者来说，在他每次新建完开发项目的时候，首先要做的第一件事就是将自己的项目纳入到 Git 代码版本管理中，完成这个操作一般需要以下这几个步骤：")]),e("blockquote",[e("p",[t._v("接下来我们拿上一节创建的 Laravel 项目来试验。以下命令请跟着我操作。")])]),e("p",[t._v("1、对 Git 进行初始化：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("cd")]),t._v(" ~/Code/Laravel\n$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])]),e("p",[t._v("2、将项目所有文件纳入到 Git 中：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" add -A\n")])]),e("p",[t._v("我们可以通过在 "),e("code",[t._v(".gitignore")]),t._v(" 文件中进行设置，来选择忽略掉一些我们不想纳入到 Git 版本管理中的文件（如缓存文件）。因此上面描述的『所有文件』指的是没在 "),e("code",[t._v(".gitignore")]),t._v(" 中被忽略的文件。")]),e("p",[t._v("3、检查 Git 状态：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n")])]),e("p",[t._v("上面命令将会向你输出存放在 Git 暂存区的文件，这意味着这些文件还未真正提交到 Git 中。")]),e("p",[t._v("4、保留改动并提交：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{attrs:{class:"token string"}},[t._v('"Initial commit"')]),t._v("\n")])]),e("p",[t._v("上面这行命令会将暂存区的文件都提交到 Git，"),e("code",[t._v("-m")]),t._v(" 选项后面带的参数表示本次提交的简单描述。")]),e("p",[t._v("5、查看历史提交记录：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" log\ncommit 4d8896a697674861adec7e2ba8b7804412c0678d\nAuthor: Aufree "),e("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("summer@yousails.com"),e("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Wed Sep 7 07:54:11 2016 +0800\n\n    Initial commit\n")])]),e("p",[t._v("从输出信息中可以很清晰的看到每次提交的作者、日期、描述等信息。注意看这里的 "),e("code",[t._v("Author")]),t._v(" 项的内容就是我们上面设置的用户信息。 按 "),e("code",[t._v("q")]),t._v(" 可退出查看。")]),e("h2",{attrs:{id:"git-的强大"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的强大","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 的强大")]),e("p",[t._v("通过上面 Git 的基本讲解，你可能还无法真正体会到 Git 的强大。在平时开发中，我们有时候可能会因为手误或其它原因将某些重要文件删除。如果之前有将此文件纳入到 Git 中，这时便可以利用 Git 来对误删文件进行恢复。请看下面演示。")]),e("p",[t._v("我们先假装不小心删除 "),e("code",[t._v("composer.json")]),t._v(" 文件：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("rm")]),t._v(" composer.json\n$ ll\n")])]),e("p",[t._v("使用 "),e("code",[t._v("ll")]),t._v(" 打印出文件目录列表时，能看到 "),e("code",[t._v("composer.json")]),t._v(" 文件已被成功移除。")]),e("p",[t._v("查看 Git 状态：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" status\nOn branch master\nChanges not staged "),e("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" commit:\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),e("span",{attrs:{class:"token string"}},[t._v('"git add/rm <file>..."')]),t._v(" to update what will be committed"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),e("span",{attrs:{class:"token string"}},[t._v('"git checkout -- <file>..."')]),t._v(" to discard changes "),e("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" working directory"),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        deleted:    composer.json\n\nno changes added to commit "),e("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("use "),e("span",{attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" and/or "),e("span",{attrs:{class:"token string"}},[t._v('"git commit -a"')]),e("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),e("p",[t._v("能看到有相关提示显示 "),e("code",[t._v("composer.json")]),t._v(" 文件已被删除，这时你可以选择将删除的文件进行恢复或提交。")]),e("p",[t._v("下面我们使用 Git 进行恢复被删除文件：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -f\n$ ll\n")])]),e("p",[t._v("这时能看到 "),e("code",[t._v("composer.json")]),t._v(" 文件已成功恢复。"),e("code",[t._v("git checkout -f")]),t._v(" 的作用是将在暂存区的更改文件进行强制撤销。")]),e("p",[t._v("上面强大的功能仅为 Git 的冰山一角，后面教程将讲解更多关于 Git 的使用。如果你想学习更多关于 Git 相关的知识，可以查阅"),e("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"}},[t._v("《Pro Git》")]),t._v("一书进行学习。")]),e("h2",{attrs:{id:"什么是-github？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-github？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 GitHub？")]),e("p",[e("a",{attrs:{href:"https://github.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub")]),t._v(" 是目前全球最大的代码托管平台，许多非常著名的项目如 "),e("a",{attrs:{href:"https://github.com/torvalds/linux",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux")]),t._v("、"),e("a",{attrs:{href:"https://github.com/apple/swift",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift")]),t._v("、"),e("a",{attrs:{href:"https://github.com/laravel/laravel",target:"_blank",rel:"noopener noreferrer"}},[t._v("Laravel")]),t._v(" 等都托管在 GitHub 上。开发者们利用 GitHub 来进行团队协作开发，查阅或收藏别人开源项目的优秀代码，针对某个 Bug 进行技术讨论等。使用 GitHub 的好处非常多，"),e("a",{attrs:{href:"https://github.com/summerblue/laravel-tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("本书项目代码")]),t._v(" 也托管在 GitHub 上面。")]),e("p",[t._v("如果要使用 GitHub，你需要完成下面这几步操作：")]),e("h3",{attrs:{id:"_1-注册-github-账号"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-注册-github-账号","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 注册 GitHub 账号")]),e("p",[t._v("如果你还没有 GitHub 账号的话，请先 "),e("a",{attrs:{href:"https://github.com/join",target:"_blank",rel:"noopener noreferrer"}},[t._v("注册")]),t._v("。")]),e("p",[e("img",{attrs:{src:s(1195),alt:"file"}})]),e("h3",{attrs:{id:"_2-为-github-账号设置-ssh-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-为-github-账号设置-ssh-key","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 为 GitHub 账号设置 SSH Key")]),e("p",[t._v("出于安全考虑，Github 服务器和我们本地的通讯要求使用 SSH Key 来验证。在前面『环境部署』的章节中，我们已经在主机中生成过 SSH Key，并且 Homestead 在初始化时，通过 Homestaed.yaml 文件中的 "),e("code",[t._v("keys")]),t._v(" 选项已经把主机中的 SSH Key 私钥复制到虚拟机中，所以这里我们无需再次生成 SSH Key。")]),e("p",[t._v("接下来将 SSH Key 添加到 ssh-agent 中：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("eval")]),t._v(" "),e("span",{attrs:{class:"token string"}},[t._v('"'),e("span",{attrs:{class:"token variable"}},[e("span",{attrs:{class:"token variable"}},[t._v("$(")]),t._v("ssh-agent -s"),e("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v("\n$ ssh-add ~/.ssh/id_rsa\n")])]),e("p",[t._v("我们再回到 "),e("strong",[t._v("主机中")]),t._v(" 打印出公钥 "),e("code",[t._v("id_rsa.pub")]),t._v(" 文件里的内容，并把输出的内容复制到剪贴板里：")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> cat ~/.ssh/id_rsa.pub\n")])]),e("p",[e("img",{attrs:{src:s(1194),alt:"file"}})]),e("p",[t._v("最后我们需要将公钥添加到 GitHub 账号，先打开 "),e("a",{attrs:{href:"https://github.com/settings/keys",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github SSH 令牌管理页面")]),t._v("，然后把你刚刚复制的令牌按照下图示例添加：")]),e("p",[e("img",{attrs:{src:s(1193),alt:"file"}})]),e("h3",{attrs:{id:"_3-提交代码到-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-提交代码到-github","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 提交代码到 Github")]),e("p",[t._v("在配置完 GitHub 账号之后，我们便可以开始在上面存放项目代码了。首先 "),e("a",{attrs:{href:"https://github.com/new",target:"_blank",rel:"noopener noreferrer"}},[t._v("新建一个 GitHub 仓库")]),t._v("，取名为 "),e("code",[t._v("hello_laravel")]),t._v("，填上 "),e("code",[t._v("Description")]),t._v(" 项目描述，"),e("code",[t._v("Initialize this repository with a README")]),t._v(" 这一项无需勾选，因为 Laravel 已默认帮我们创建好了 "),e("code",[t._v("readme.md")]),t._v(" 文件。")]),e("p",[e("img",{attrs:{src:s(1192),alt:"file"}})]),e("p",[t._v("创建完成之后，使用以下命令将代码上传到 GitHub 上（将 your_username 替换为你自己的 GitHub 用户名）：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("cd")]),t._v(" ~/Code/Laravel\n$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" remote add origin git@github.com:your_username/hello_laravel.git\n$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin master\n")])]),e("p",[t._v("至此，项目已成功托管到 GitHub 上。")]),e("p",[e("img",{attrs:{src:s(1191),alt:"file"}})]),e("p",[t._v("后面我们如果对本地代码进行了改动，只需运行这 3 条命令即可将代码推送到安全可靠的 GitHub 上：")]),e("blockquote",[e("p",[t._v("注意：以下命令作为知识重温，不需要执行。")])]),e("p",[t._v("1、保存到暂存区：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" add -A\n")])]),e("p",[t._v("2、输入描述信息并提交到本地的 Git：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{attrs:{class:"token string"}},[t._v('"Say something"')]),t._v("\n")])]),e("p",[t._v("3、将代码推送到 GitHub：")]),e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("$ "),e("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])])}],r=s(0),n=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},e,!1,null,null,null);a.default=n.exports}}]);