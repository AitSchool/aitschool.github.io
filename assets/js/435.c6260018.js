(window.webpackJsonp=window.webpackJsonp||[]).push([[435],{1588:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"_3-6-查看数据对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-查看数据对象","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.6 查看数据对象")]),s("p",[e._v("在前面的章节中我们学过，当使用了 "),s("code",[e._v("use")]),e._v(" 对类进行引用之后，便可以对类进行直接调用。为了让接下来的命令可读性更高，我们使用 "),s("code",[e._v("use")]),e._v(" 来引用 "),s("code",[e._v("App\\Models\\User")]),e._v(" Eloquent 模型类：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> use App\\Models\\User\n")])]),s("p",[e._v("这样我们就可以在后面的操作中直接调用 "),s("code",[e._v("User")]),e._v(" 而不是完整的类名 "),s("code",[e._v("App\\Models\\User")]),e._v("。")]),s("blockquote",[s("p",[e._v("注意：上面的 "),s("code",[e._v("use")]),e._v(" 引用命令只会对当前会话有效，如果中途退出了 Tinker 的话，需要重新再执行一次上面的命令，才能继续使用 "),s("code",[e._v("User")]),e._v(" 类名缩写。")])]),s("p",[e._v("使用 Eloquent 模型，能让我们更加轻松的与数据库进行交互。当我们要查找一个 id 为 1 的用户时，可以使用下面这种方法：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> User::find(1)\n")])]),s("p",[e._v("当你传给 "),s("code",[e._v("find")]),e._v(" 方法的 id 不存在时，Tinker 将会返回 "),s("code",[e._v("null")]),e._v("：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> User::find(5)\n=> null\n")])]),s("p",[e._v("如果你想在查询用户不存在时触发报错的话，可使用 findOrFail：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> User::findOrFail(5)\nIlluminate\\Database\\Eloquent\\ModelNotFoundException with message 'No query results for model [App\\Models\\User] 5'\n")])]),s("p",[e._v("如果要查找用户表中的首个用户，可以使用 first 方法：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> User::first()\n")])]),s("p",[e._v("我们还可以用 all 方法取出所有的用户数据：")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(">>> User::all()\n")])])])}],!1,null,null,null);t.default=a.exports}}]);