(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{1686:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"数值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值")]),s("p",[t._v("Number类型使用IEEE754格式来表示整数和浮点数值。为了支持各种数值类型，ECMA-262定义了不同的数值字面量格式（八进制、十六进制），但在进行算术计算时，所有数值都将转换成十进制数值。")]),s("p",[t._v("在程序使用某个值时，会将数字以位序列的方式存放在计算机的内存当中。JavaScript使用固定长度为64位的位序列来存储数字值，因此表示数字的个数是有限的。对于二进制来说，大约是2的64次方，1800亿亿。但在实际中，并不能使用所有少于1800亿亿的数字，因为1800亿亿除了要表达负数，还有浮点数。在JavaScript中实际可存储的数字范围是9000万亿。对于过大或者过小的数字来说，可以使用科学技术法来表示。")]),s("p",[t._v("浮点数值最高的精度是17位小数，但是在进行算术计算时其精确度远远不如整数。例如，0.1加0.2的结果不是0.3，而是0.30000000000000004。因此永远不要测试某个特定的浮点数值。浮点数值的计算误差属于IEEE754数值浮点计算的通病，ECMAScript并非独此一家，其他使用相同格数式的语言也存在这个问题。")]),s("h2",{attrs:{id:"infinity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#infinity","aria-hidden":"true"}},[t._v("#")]),t._v(" Infinity")]),s("p",[t._v("由于以上内存的限制，ECMA不能保存所有的数值。ECMA把最小数值保存在"),s("code",[t._v("Number.MIN_VALUE")]),t._v("中，在大多数浏览器中，这个值是5e-324。最大的数值保存在"),s("code",[t._v("Number.MAX_VALUE")]),t._v("，在大多数浏览器中值为1.7976931348623157e+308。如果计算超出了这两个范围，就会自动转换成特殊Infinity值,Infinity(正无穷）和 -Infinity（负无穷）。")]),s("h2",{attrs:{id:"nan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nan","aria-hidden":"true"}},[t._v("#")]),t._v(" NaN")]),s("p",[t._v("NaN，即非数值（Not a Number），是一个特殊的数值，表示一个要奔来返回数值的操作数未返回数值的情况。例如在0/0、Infinity - Infinity 或当数值运算中产生不精确或无意义的结果时，就用NaN来表示。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("99")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),s("h3",{attrs:{id:"isnan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isnan","aria-hidden":"true"}},[t._v("#")]),t._v(" isNaN")]),s("p",[t._v("isNaN( ) 函数用来确定一个值是否为不能被转化为有效数字。NaN 与 JavaScript 中其他的值不同，NaN不能通过相等操作符（== 和 ===）来判断 ，因为 NaN == NaN 和 NaN === NaN 都会返回 false。 因此，isNaN 就很有必要了。")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("NaN")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'blue'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'10'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),s("h2",{attrs:{id:"数值转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值转换")]),s("h3",{attrs:{id:"其他类型转化为数值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他类型转化为数值","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他类型转化为数值")]),s("p",[s("code",[t._v("Number()")]),t._v("、"),s("code",[t._v("parseInt()")]),t._v("和"),s("code",[t._v("parseFloat()")]),t._v("，第一个函数即转型函数"),s("code",[t._v("Number()")]),t._v("克用于任何数据类型，而另两个函数则专门用于把字符串转换成数值。这三个函数对于同样的输入会返回不同的结果。")]),s("table",[s("thead",[s("tr",[s("th",[t._v("数据类型")]),s("th",[t._v('""')]),s("th",[t._v("null")]),s("th",[t._v("false")]),s("th",[t._v("true")]),s("th",[t._v('"hello11.11"')]),s("th",[t._v('"11.11hello"')])])]),s("tbody",[s("tr",[s("td",[t._v("Number")]),s("td",[t._v("0")]),s("td",[t._v("0")]),s("td",[t._v("0")]),s("td",[t._v("1")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")])]),s("tr",[s("td",[t._v("parseInt")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("11")])]),s("tr",[s("td",[t._v("parseFloat")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("NaN")]),s("td",[t._v("11.11")])])])]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num   "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("Number")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"11.11hello"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),s("span",{attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" int   "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"11.11hello"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{attrs:{class:"token comment"}},[t._v("//11")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" float "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("parseFloat")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"11.11hello"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("//11.11")]),t._v("\n")])]),s("ul",[s("li",[s("code",[t._v("Number()")]),t._v("函数在转换字符串时比较复杂且不合理，因此处理整数时候常用的是"),s("code",[t._v("parseInt()")]),t._v("。")]),s("li",[s("code",[t._v("parseInt()")]),t._v(" 还能传入第二个参数按X进制解析，而"),s("code",[t._v("parseFloat()")]),t._v("和"),s("code",[t._v("Number()")]),t._v("只解析十进制值。")])]),s("h3",{attrs:{id:"数值转化为字符串-tofixed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数值转化为字符串-tofixed","aria-hidden":"true"}},[t._v("#")]),t._v(" 数值转化为字符串 toFixed")]),s("p",[t._v("toFixed 方法会安装指定的小数位返回数值字符串")]),s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("10.0005")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toFixed")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"10"')]),t._v("\nnum"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toFixed")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("2")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"10.00"')]),t._v("\nnum"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("toFixed")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v('//"10.001"')]),t._v("\n")])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[t._v("#")]),t._v(" 参考")]),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5a6fce10f265da3e261c3c71",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 浮点数精度的分析文章")])]),s("li",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN Math")])])])])}],!1,null,null,null);a.default=e.exports}}]);