(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{1302:function(t,i,e){"use strict";e.r(i);var l=[function(){var t=this,i=t.$createElement,l=t._self._c||i;return l("div",{staticClass:"content"},[l("h1",{attrs:{id:"_5-9-小结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5-9-小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.9 小结")]),l("p",[l("img",{attrs:{src:e(286),alt:"file"}})]),l("p",[t._v("经过本章节的学习，我们学到了以下内容：")]),l("ul",[l("li",[t._v("购物车的数据库结构设计；")]),l("li",[t._v("使用闭包来校验用户输入；")]),l("li",[t._v("完成了将商品加入购物的功能；")]),l("li",[t._v("订单流水号的生成；")]),l("li",[t._v("创建订单时应保存用户收货地址的快照而非 ID；")]),l("li",[t._v("代表状态的值应使用常量；")]),l("li",[t._v("在 Laravel 中使用数据库事务的正确姿势；")]),l("li",[t._v("高并发下减商品库存的正确姿势；")]),l("li",[t._v("使用延迟队列自动关闭未支付订单；")]),l("li",[t._v("完成了用户端订单列表的展示；")]),l("li",[t._v("了解了使用预加载与延迟预加载解决数据库 N + 1 问题；")]),l("li",[t._v("完成了用户端订单详情页的展示；")]),l("li",[t._v("使用 Service 模式对业务代码的封装来提高代码的复用性。")])]),l("p",[t._v("这一章的知识量比较大，涉及到电商技术难点『超卖』、『事务』、『库存』等概念，不适应的同学可以多温习几遍这一节的知识点，尝试做一个脑图或者流程图缕缕思维。下一章里，我们将一起开发电商产品含金量最高的功能模块 —— 支付。")])])}],s=e(0),_=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},l,!1,null,null,null);i.default=_.exports},286:function(t,i,e){t.exports=e.p+"assets/img/5.9_1.303febc9.jpeg"}}]);