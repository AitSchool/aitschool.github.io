(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{1119:function(t,a,s){t.exports=s.p+"assets/img/3.4_1.01fd716b.png"},1513:function(t,a,s){"use strict";s.r(a);var n=[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_3-4-模型文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-模型文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.4 模型文件")]),n("h2",{attrs:{id:"用户模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户模型","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户模型")]),n("p",[t._v("Laravel 默认为我们生成了用户模型文件，代码如下所示：")]),n("p",[n("em",[t._v("app/User.php")])]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token php language-php"}},[n("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("App")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("Illuminate"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Notifications"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Notifiable")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("Illuminate"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Foundation"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Auth"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("User")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Authenticatable"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Authenticatable")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("Notifiable")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$fillable")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'email'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'password'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$hidden")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'password'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'remember_token'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("可以看到 Laravel 默认为我们生成的用户模型中包含了不少代码，其中 "),n("code",[t._v("Notifiable")]),t._v(" 是消息通知相关功能引用，"),n("code",[t._v("Authenticatable")]),t._v(" 是授权相关功能的引用。接下来我们主要将精力放在用户模型中定义的三个属性 "),n("code",[t._v("table")]),t._v(", "),n("code",[t._v("fillable")]),t._v(", "),n("code",[t._v("hidden")]),t._v(" 上。我们在前面提到过，Eloquent 模型可以让我们很方便的与数据库进行交互，因此我们需要在 Eloquent 模型中借助对 "),n("code",[t._v("table")]),t._v(" 属性的定义，来指明要进行数据库交互的数据库表名称，在用户模型中，我们对应要交互的数据库表为 "),n("code",[t._v("users")]),t._v("，因此定义的代码如下：")]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$table")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'users'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("在使用 Laravel 进行项目开发时，我们需要考虑到，当一些不怀好意的用户将类似 "),n("code",[t._v("is_admin")]),t._v(" 这样的字段也嵌入到表单中进行提交时，会有怎样的后果？其后果是用户能够将自己指定为管理员，并进行一些只有管理员才能执行的操作，如删除用户，删除帖子等，这即是我们常说的『批量赋值』的错误，后面我将在后面章节『进行微博模型构建』时，为你演示『批量赋值』的报错。为了提高应用的安全性，Laravel 在用户模型中默认为我们添加了 "),n("code",[t._v("fillable")]),t._v(" 在过滤用户提交的字段，只有包含在该属性中的字段才能够被正常更新：")]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$fillable")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'name'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'email'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'password'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("p",[t._v("最后，当我们需要对用户密码或其它敏感信息在用户实例通过数组或 JSON 显示时进行隐藏，则可使用 "),n("code",[t._v("hidden")]),t._v(" 属性：")]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$hidden")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'password'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'remember_token'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),n("h2",{attrs:{id:"使用-app-models-命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-app-models-命名空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用 "),n("code",[t._v("App\\Models")]),t._v(" 命名空间")]),n("p",[t._v("Laravel 为我们默认创建的模型文件放置在 "),n("code",[t._v("app")]),t._v(" 文件夹下，为了让新手能够更好理解 MVC 模式的开发流程，本教程中将统一使用 "),n("code",[t._v("app/Models")]),t._v(" 文件夹来放置所有的模型文件。现在让我们先来创建一个 "),n("code",[t._v("app/Models")]),t._v(" 文件夹，并将 "),n("code",[t._v("User.php")]),t._v(" 文件放置到其中。")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" app/Models\n$ "),n("span",{attrs:{class:"token function"}},[t._v("mv")]),t._v(" app/User.php app/Models/User.php\n")])]),n("p",[t._v("在执行完这一步的操作之后，我们还需要执行下面这两个操作：")]),n("p",[t._v("1、修改 User.php 文件，更改 namespace 为我们新创建的文件夹路径：")]),n("p",[n("em",[t._v("app/Models/User.php")])]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token php language-php"}},[n("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("App"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Models")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),n("p",[t._v("2、编辑器全局搜索 "),n("code",[t._v("App\\User")]),t._v(" 替换为 "),n("code",[t._v("App\\Models\\User")]),t._v("，在 Sublime Text 中可使用快捷键 "),n("code",[t._v("shift + cmd(ctrl) + f")]),t._v(" 来进行全局搜索替换的操作。")]),n("p",[t._v("完成之后，点击右下角的 "),n("code",[t._v("Replace All")]),t._v(" 按钮。")]),n("p",[n("img",{attrs:{src:s(1119),alt:"file"}})]),n("p",[t._v("因为上面的文件改动较大，因此我们需要进行一次 Git 提交，该改动的代码进行保存。")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" add -A\n$ "),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),n("span",{attrs:{class:"token string"}},[t._v('"Move user model to models folder"')]),t._v("\n")])]),n("h2",{attrs:{id:"article-模型的例子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#article-模型的例子","aria-hidden":"true"}},[t._v("#")]),t._v(" Article 模型的例子")]),n("p",[t._v("模型文件可通过多种方式进行创建，下面让我们以文章模型（Article）为例，为你讲解模型文件的创建。")]),n("p",[t._v("一般情况下，如果我们要自己手动创建一个模型文件，最简单的方式是通过 "),n("code",[t._v("make:model")]),t._v(" 来创建。需要注意的一点是，模型类名称使用 "),n("strong",[t._v("单数")]),t._v(" 形式来命名：")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ php artisan make:model Article\n")])]),n("h3",{attrs:{id:"指定命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指定命名空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 指定命名空间")]),n("p",[t._v("这种方式创建的模型默认是放置在 "),n("code",[t._v("app")]),t._v(" 文件夹下，本教程我们因遵循 MVC 的最佳实践而需要把模型文件放置于 "),n("code",[t._v("app/Models")]),t._v(" 目录下。首先我们移除刚刚错误创建的文件，然后再为创建模型命令指定命名空间：")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{attrs:{class:"token function"}},[t._v("rm")]),t._v(" app/Article.php\n$ php artisan make:model Models/Article\n")])]),n("h3",{attrs:{id:"同时创建迁移文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同时创建迁移文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 同时创建迁移文件")]),n("p",[t._v("如果需要在创建模型的同时顺便创建数据库迁移，则可以使用 "),n("code",[t._v("--migration")]),t._v(" 或 "),n("code",[t._v("-m")]),t._v(" 选项，让我们将刚刚生成的模型进行删除，尝试生成迁移文件：")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{attrs:{class:"token function"}},[t._v("rm")]),t._v(" app/Models/Article.php\n$ php artisan make:model Models/Article -m\nModel created successfully.\nCreated Migration: 2016_09_10_023235_create_articles_table\n")])]),n("p",[t._v("可看到模型文件和迁移文件都一并生成了。")]),n("h2",{attrs:{id:"eloquent-数据模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eloquent-数据模型","aria-hidden":"true"}},[t._v("#")]),t._v(" Eloquent 数据模型")]),n("p",[t._v("正常情况下，一个最小代码的 Eloquent 模型如下所示：")]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token php language-php"}},[n("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("App"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Models")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("Illuminate"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Database"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Eloquent"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Model")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Article")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Model")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"eloquent-表命名约定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eloquent-表命名约定","aria-hidden":"true"}},[t._v("#")]),t._v(" Eloquent 表命名约定")]),n("p",[t._v("在该文件中，Eloquent Article 模型默认情况下会使用类的「下划线命名法」与「复数形式名称」来作为数据表的名称生成规则。如：")]),n("ul",[n("li",[t._v("Article 数据模型类对应 "),n("code",[t._v("articles")]),t._v(" 表；")]),n("li",[t._v("User 数据模型类对应 "),n("code",[t._v("users")]),t._v(" 表；")]),n("li",[t._v("BlogPost 数据模型类对应 "),n("code",[t._v("blog_posts")]),t._v(" 表；")])]),n("p",[t._v("因此 Eloquent 将会假设 Article 模型被存储记录在 articles 数据表中。如果你需要指定自己的数据表，则可以通过 "),n("code",[t._v("table")]),t._v(" 属性来定义，如：")]),n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{attrs:{class:"token php language-php"}},[n("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("App"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Models")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),n("span",{attrs:{class:"token package"}},[t._v("Illuminate"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Database"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Eloquent"),n("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Model")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Article")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Model")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),n("span",{attrs:{class:"token variable"}},[t._v("$table")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'my_articles'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"『约定优于配置』解释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#『约定优于配置』解释","aria-hidden":"true"}},[t._v("#")]),t._v(" 『约定优于配置』解释")]),n("p",[t._v("『约定优于配置』（convention over configuration），也称作按约定编程，这是一种软件设计范式，旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。如果所用工具的约定与你的期待相符，便可省去配置；反之，你可以配置来达到你所期待的方式。")]),n("p",[t._v("Eloquent 数据表命名约定机制即属于『约定优于配置』，数据模型类 "),n("code",[t._v("Article")]),t._v(" 按照系统约定对应于 "),n("code",[t._v("articles")]),t._v(" 数据表，如果我们因为特殊原因需要使用其他表名称，只需要通过配置 "),n("code",[t._v("$table")]),t._v(" 即可达到预期。")]),n("p",[t._v("『约定优于配置』能极大提高开发效率，并且也更有利于团队协作。Laravel 项目中大量的使用了『约定优于配置』这种设计范式，这也是 Laravel 的另一个可爱之处。")]),n("h2",{attrs:{id:"收拾舞台"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#收拾舞台","aria-hidden":"true"}},[t._v("#")]),t._v(" 收拾舞台")]),n("p",[t._v("由于我们刚刚创建的文章模型仅作演示用，因此我们无需对这几个文件的更改进行保存，可通过下面命令进行移除：")]),n("pre",{pre:!0,attrs:{class:"language-bash"}},[n("code",[t._v("$ "),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" add -A\n$ "),n("span",{attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -f\n")])])])}],e=s(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);a.default=r.exports}}]);