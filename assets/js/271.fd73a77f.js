(window.webpackJsonp=window.webpackJsonp||[]).push([[271],{1343:function(e,_,t){"use strict";t.r(_);var c=[function(){var e=this,_=e.$createElement,c=e._self._c||_;return c("div",{staticClass:"content"},[c("h1",{attrs:{id:"_3-1-微信登录流程"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-微信登录流程","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.1 微信登录流程")]),c("p",[e._v("所谓的第三方登录，就是利用用户在第三方平台上已有的账号来快速完成自己应用的登录或者注册的功能，常用的协议为 OAuth 2.0，基本上每个 APP，都会集成微信，微博等第三方登录，方便用户快速的登录并开始使用。")]),c("p",[e._v("参考一下知乎 APP 第三方登录的流程\n"),c("img",{attrs:{src:t(726),alt:"file"}})]),c("p",[e._v("大家可以操作体验一下")]),c("ol",[c("li",[e._v("打开知乎，其他登录方式中选择微信登录")]),c("li",[e._v("跳转到微信，提示我们是否授权知乎应用的登录")]),c("li",[e._v("点击 "),c("code",[e._v("确认登录")]),e._v(" 后，跳转回知乎，如果是第一次登录，会进入知乎接下来绑定手机号的流程。如果不是第一次使用微信登录，那么会直接跳转到知乎首页。")])]),c("p",[e._v("这个流程就是 OAuth 2.0 的基本流程。")]),c("h2",{attrs:{id:"oauth-2-0-流程分析"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0-流程分析","aria-hidden":"true"}},[e._v("#")]),e._v(" OAuth 2.0 流程分析")]),c("p",[e._v("关于 OAuth 2.0 协议，大家可以先参考阮一峰的 "),c("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("理解OAuth 2.0")]),e._v(" 了解一下 OAuth 2.0 的概念。OAuth 2.0 的授权模式一共有4种，我们常用的模式为 "),c("code",[e._v("授权码模式")]),e._v("。")]),c("p",[e._v("简单的解释一下流程")]),c("ol",[c("li",[e._v("客户端（app/浏览器）将用户导向第三方认证服务器")]),c("li",[e._v("用户在第三方认证服务器，选择是否给予客户端授权")]),c("li",[e._v("用户同意授权后，认证服务器将用户导向客户端事先指定的 "),c("code",[e._v("重定向URI")]),e._v("，同时附上一个授权码。")]),c("li",[e._v("客户端将授权码发送至服务器，服务器通过授权码以及 "),c("code",[e._v("APP_SECRET")]),e._v(" 向第三方服务器申请 "),c("code",[e._v("access_token")])]),c("li",[e._v("服务器通过 "),c("code",[e._v("access_token")]),e._v("，向第三方服务器申请用户数据，完成登录流程")])]),c("p",[e._v("以上是一个基本流程，无论是网页应用，还是手机应用，流程都基本相同，但是对于某些 APP，可能稍有差异。例如有的 APP 可能没有服务端，当需要用户授权一些信息，例如获取用户微信姓名和头像时，由于没有服务器的介入，获取 "),c("code",[e._v("授权码")]),e._v(" 之后，会直接向第三方服务器申请 "),c("code",[e._v("access_token")]),e._v(" ，然后换取用户数据，所以这一类 APP，需要将 "),c("code",[e._v("APP_ID")]),e._v(" 和 "),c("code",[e._v("APP_SECRET")]),e._v("，存储在客户端，获取到的 "),c("code",[e._v("access_token")]),e._v(" 可能也需要保存在客户端。")]),c("p",[e._v("这种做法有个安全问题，因为 "),c("code",[e._v("APP_SECRET")]),e._v(" 和 "),c("code",[e._v("access_token")]),e._v(" 都是敏感数据，泄露之后都会有安全隐患，微信的 "),c("a",{attrs:{href:"https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419317851&token=&lang=zh_CN",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档")]),e._v(" 中也提到了这一点")]),c("blockquote",[c("p",[e._v("1、Appsecret 是应用接口使用密钥，泄漏后将可能导致应用数据泄漏、应用的用户数据泄漏等高风险后果；存储在客户端，极有可能被恶意窃取（如反编译获取 Appsecret）；\n2、access_token 为用户授权第三方应用发起接口调用的凭证（相当于用户登录态），存储在客户端，可能出现恶意获取access_token 后导致的用户数据泄漏、用户微信相关接口功能被恶意发起等行为；\n3、refresh_token 为用户授权第三方应用的长效凭证，仅用于刷新 access_token，但泄漏后相当于 access_token 泄漏，风险同上。")])]),c("p",[e._v("建议将 Appsecret、用户数据（如access_token）放在 App 云端服务器，由云端中转接口调用请求。")]),c("p",[e._v("对于无服务器的应用，第三方登录只能通过上面的方式实现。但是，对于所有有服务端的应用来说，最好的做法是将 APP_SECRET 存储在服务器中，客户端获取授权码后，将授权码提交到服务器，由服务器处理接下来的流程。")]),c("p",[e._v("总结一下，对于 APP 第三方登陆来说有两种实现方法")]),c("ol",[c("li",[c("code",[e._v("APP_SECRET")]),e._v(" 存储在客户端，客户端获取授权码之后，直接通过授权码和 "),c("code",[e._v("APP_SECRET")]),e._v(" 去第三方换取 "),c("code",[e._v("access_token")]),e._v("。")]),c("li",[c("code",[e._v("APP_SECRET")]),e._v(" 存储在服务端，客户端获取授权码之后，将授权码发送给服务器，服务器通过授权码和 "),c("code",[e._v("APP_SECRET")]),e._v(" 去第三方换取 "),c("code",[e._v("access_token")]),e._v("。（推荐）")])]),c("p",[e._v("并不是所有情况我们都能使用推荐的方式，例如如果客户端为了快速实现，使用了某些第三方服务，例如友盟，友盟貌似只能使用第一种方式, "),c("a",{attrs:{href:"http://bbs.umeng.com/thread-15229-1-1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("相关问题")])]),c("p",[e._v("无论哪种方式，我们需要做的都是让服务器得到"),c("code",[e._v("access_token")]),e._v("，然后换取用户信息。接下来的课程，我们将同时支持上面两种方式。")])])}],o=t(0),v=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},c,!1,null,null,null);_.default=v.exports},726:function(e,_,t){e.exports=t.p+"assets/img/3.1_1.89709216.png"}}]);