(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{1361:function(a,e,_){"use strict";_.r(e);var t=_(0),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,_=a._self._c||e;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"_10-1-passport"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-passport","aria-hidden":"true"}},[a._v("#")]),a._v(" 10.1 Passport")]),_("p",[a._v("JWT 是一种比较便捷的用户认证方式，也是我们推荐的方式。Laravel 也为我们提供了一套 API 授权认证方案——Passport，这一章我们将学习如何使用 Passport 。")]),_("h2",{attrs:{id:"oauth2-授权码模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-授权码模式","aria-hidden":"true"}},[a._v("#")]),a._v(" OAuth2 授权码模式")]),_("p",[a._v("Passport 是对 OAuth2 的封装，可以快速方便的在服务端搭建完整的 OAuth2。回忆一下 OAuth2，其实我们在微信登录流程讲解中已经介绍过 OAuth2 的授权码模式。")]),_("p",[a._v("再次回忆一下授权码模式，主要应用在平台给第三方的应用进行用户授权，简单梳理一下流程，假设我们有 Larabbs 开放平台，第三方的应用 Larabbs-Blog，希望用户可以直接通过 Larabbs 中的账户密码登录，并且获取用户在 Larabbs 中发布的话题展示出来。")]),_("ol",[_("li",[_("code",[a._v("Larabbs")]),a._v(" 为 "),_("code",[a._v("Larabbs-Blog")]),a._v(" 创建客户端应用，并且分配 "),_("code",[a._v("client_id")]),a._v(" 和 "),_("code",[a._v("client_secret")]),a._v(" 给 "),_("code",[a._v("Larabbs-Blog")]),a._v("；")]),_("li",[a._v("用户在 "),_("code",[a._v("Larabbs-Blog")]),a._v(" 的登录界面，点击 "),_("code",[a._v("使用 Larabbs 登录")]),a._v("；")]),_("li",[_("code",[a._v("Larabbs-Blog")]),a._v(" 跳转到 "),_("code",[a._v("Larabbs")]),a._v(" 的用户授权页面，用户在输入用户名密码登录，授权 "),_("code",[a._v("Larabbs-Blog")]),a._v(" 可以获取 "),_("code",[a._v("Larabbs")]),a._v(" 中的信息；")]),_("li",[_("code",[a._v("Larabbs")]),a._v("  跳转回 "),_("code",[a._v("Larabbs-Blog")]),a._v("，并返回授权码；")]),_("li",[_("code",[a._v("Larabbs-Blog")]),a._v(" 通过 "),_("code",[a._v("client_secret")]),a._v(" 以及授权码获取到 "),_("code",[a._v("access_token")]),a._v("，然后通过 "),_("code",[a._v("access_token")]),a._v(" 获取 "),_("code",[a._v("Larabbs")]),a._v(" 中的用户以及话题信息。")])]),_("p",[a._v("上面是一个完整的 OAuth2 授权流程，可以看到使用授权码模式，"),_("code",[a._v("Larabbs-Blog")]),a._v(" 没有任何机会获取到用户的密码，而且只有用户在 "),_("code",[a._v("Larabbs")]),a._v(" 中同意授权以后，"),_("code",[a._v("Larabbs-Blog")]),a._v(" 才能获取用户的信息，保证了用户数据的安全。")]),_("p",[a._v("授权码模式是完整基础的 OAuth2 流程，我们通常说的第三方登录都是指授权码模式。")]),_("h2",{attrs:{id:"oauth2-密码模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oauth2-密码模式","aria-hidden":"true"}},[a._v("#")]),a._v(" OAuth2 密码模式")]),_("p",[a._v("但是对于我们自己的客户端，比如 Larabbs 的 IOS 客户端，中间的授权码流程就显得有些多余，这时 OAuth2 的另一个模式——"),_("a",{attrs:{href:"https://laravel-china.org/docs/laravel/5.5/passport#password-grant-tokens",target:"_blank",rel:"noopener noreferrer"}},[a._v("密码模式")]),a._v("，就很好的解决了这个问题。")]),_("p",[a._v("对于我们自己的客户端，用户应该直接在客户端中输入用户名和密码，客户端直接通过用户数据的用户名和密码获取 "),_("code",[a._v("access_token")]),a._v(" 即可。")]),_("p",[a._v("密码模式流程如下：")]),_("ul",[_("li",[a._v("用户在客户端输入用户名和密码；")]),_("li",[a._v("客户端提交用户名，密码，"),_("code",[a._v("client_id")]),a._v(" 和 "),_("code",[a._v("client_secret")]),a._v(" 到服务器；")]),_("li",[a._v("服务器直接返回 "),_("code",[a._v("access_token")]),a._v("；")])]),_("p",[a._v("可以看到密码模式的流程非常简洁，我们可以方便的向自己的客户端发出访问令牌，而不需要遍历整个 OAuth2 授权代码重定向流程。")]),_("p",[a._v("下面的课程，我们会使用 OAuth2 密码模式，替换现在的 JWT，为接口提供认证。")])])}],!1,null,null,null);e.default=s.exports}}]);