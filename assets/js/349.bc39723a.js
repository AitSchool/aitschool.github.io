(window.webpackJsonp=window.webpackJsonp||[]).push([[349],{1460:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_9-4-动态流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-动态流","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.4 动态流")]),a("p",[t._v("接下来让我们完成本教程演示应用的最后一个功能 - 在主页上显示所有关注用户的微博动态。")]),a("p",[t._v("我们在前面章节中已经为用户定义了 Feed 动态流方法，只是该方法比较粗略，只是显示当前登录用户的个人微博状态而已。现在我们要对该方法进行完善，加入关注人的微博动态数据。")]),a("p",[a("em",[t._v("app/Models/User.php")])]),a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{attrs:{class:"token php language-php"}},[a("span",{attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" "),a("span",{attrs:{class:"token package"}},[t._v("App"),a("span",{attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Models")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{attrs:{class:"token package"}},[t._v("Auth")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("User")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Authenticatable")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("feed")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token variable"}},[t._v("$user_ids")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Auth"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("user")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("followings")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("pluck")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("toArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("array_push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$user_ids")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Auth"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("user")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token property"}},[t._v("id")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Status"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token function"}},[t._v("whereIn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'user_id'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$user_ids")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                              "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("with")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'user'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                              "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token function"}},[t._v("orderBy")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'created_at'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'desc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的方法做了以下几个事情：")]),a("ol",[a("li",[t._v("通过 "),a("code",[t._v("followings")]),t._v(" 方法取出所有关注用户的信息，再借助 "),a("code",[t._v("pluck")]),t._v(" 方法将 "),a("code",[t._v("id")]),t._v(" 进行分离并赋值给 "),a("code",[t._v("user_ids")]),t._v("；")]),a("li",[t._v("将当前用户的 "),a("code",[t._v("id")]),t._v(" 加入到 "),a("code",[t._v("user_ids")]),t._v(" 数组中；")]),a("li",[t._v("使用 Laravel 提供的 "),a("a",{attrs:{href:"http://d.laravel-china.org/docs/5.5/queries",target:"_blank",rel:"noopener noreferrer"}},[t._v("查询构造器")]),a("code",[t._v("whereIn")]),t._v(" 方法取出所有用户的微博动态并进行倒序排序；")]),a("li",[t._v("我们使用了 Eloquent 关联的 "),a("a",{attrs:{href:"http://d.laravel-china.org/docs/5.5/eloquent-relationships#%E9%A2%84%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("预加载")]),a("code",[t._v("with")]),t._v(" 方法，预加载避免了 "),a("code",[t._v("N+1 查找的问题")]),t._v("，大大提高了查询效率。"),a("code",[t._v("N+1 问题")]),t._v(" 的例子可以阅读此文档 "),a("a",{attrs:{href:"http://d.laravel-china.org/docs/5.5/eloquent-relationships#%E9%A2%84%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eloquent 模型关系预加载")]),t._v(" 。")])]),a("p",[t._v("这里需要注意的是 "),a("code",[t._v("Auth::user()->followings")]),t._v(" 的用法。我们在 "),a("code",[t._v("User")]),t._v(" 模型里定义了关联方法 "),a("code",[t._v("followings()")]),t._v("，关联关系定义好后，我们就可以通过访问 "),a("code",[t._v("followings")]),t._v(" 属性直接获取到关注用户的 "),a("strong",[t._v("集合")]),t._v("。这是 Laravel Eloquent 提供的「动态属性」属性功能，我们可以像在访问模型中定义的属性一样，来访问所有的关联方法。")]),a("p",[t._v("还有一点需要注意的是 "),a("code",[t._v("$user->followings")]),t._v(" 与 "),a("code",[t._v("$user->followings()")]),t._v(" 调用时返回的数据是不一样的， "),a("code",[t._v("$user->followings")]),t._v(" 返回的是 "),a("a",{attrs:{href:"https://d.laravel-china.org/docs/5.5/eloquent-collections",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eloquent：集合")]),t._v(" 。而 "),a("code",[t._v("$user->followings()")]),t._v(" 返回的是 "),a("a",{attrs:{href:"https://d.laravel-china.org/docs/5.5/queries",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据库请求构建器")]),t._v(" ，"),a("code",[t._v("followings()")]),t._v(" 的情况下，你需要使用：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$user->followings()->get()\n")])]),a("p",[t._v("或者 ：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$user->followings()->paginate()\n")])]),a("p",[t._v("方法才能获取到最终数据。可以简单理解为 "),a("code",[t._v("followings")]),t._v(" 返回的是数据集合，而 "),a("code",[t._v("followings()")]),t._v(" 返回的是数据库查询语句。如果使用 "),a("code",[t._v("get()")]),t._v(" 方法的话：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$user->followings == $user->followings()->get() // 等于 true\n")])])])}],!1,null,null,null);s.default=e.exports}}]);