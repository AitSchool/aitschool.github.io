(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{1538:function(t,a,e){"use strict";e.r(a);var r=e(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"编译器概念介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器概念介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译器概念介绍")]),e("ul",[e("li",[t._v("编译器与解释器")]),e("li",[t._v("词法分析器概念")]),e("li",[t._v("语法分析与语法树概念")]),e("li",[t._v("语义分析与计算概念")])]),e("h2",{attrs:{id:"编译器与解释器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译器与解释器","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译器与解释器")]),e("p",[t._v("编译器与解释器他们之间的区别和联系")]),e("table",[e("thead",[e("tr",[e("th",[t._v("编译器")]),e("th",[t._v("解释器")])])]),e("tbody",[e("tr",[e("td",[t._v("输入整份源码")]),e("td",[t._v("输入单条指令")])]),e("tr",[e("td",[t._v("输出目标语言代码")]),e("td",[t._v("输出指令解释执行后结果")])]),e("tr",[e("td",[t._v("同一份代码只需编译一次")]),e("td",[t._v("每次运行时均需解释")])]),e("tr",[e("td",[t._v("全量检查源码后异常提醒")]),e("td",[t._v("逐行解释后异常提醒")])]),e("tr",[e("td",[t._v("不执行输出代码")]),e("td",[t._v("执行每条指令输出")])])])]),e("p",[t._v("一个典型的"),e("strong",[t._v("编译过程")]),t._v("，他所包含的几个核心步骤：")]),e("ol",[e("li",[t._v("词法分析 ，把所有输入的关键字拆分出来，然后把各类关键字的token类型标记。")]),e("li",[t._v("语法分析 ，把关键字的数组，解析成为语法树。")]),e("li",[t._v("语义计算 ，对树进行遍历，把代码的运行结果求出来。")])]),e("h2",{attrs:{id:"词法分析器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法分析器","aria-hidden":"true"}},[t._v("#")]),t._v(" 词法分析器")]),e("p",[t._v("我们输入一个源代码文本，很长很长的字符串，包含各种缩进、注释等代码。词法分析器通过处理，去除不必要的空白和注释，返回 token 的标记数组。")]),e("ul",[e("li",[t._v("输入\n"),e("ul",[e("li",[t._v("源码字符串文本")]),e("li",[t._v("带注释、空白等无关内容")]),e("li",[t._v("var x = 123")])])]),e("li",[t._v("输出\n"),e("ul",[e("li",[t._v("有序的 Tokens 数组")]),e("li",[t._v("去除空白与注释")]),e("li",[t._v("['var', 'x', '=', '123']")])])])]),e("h2",{attrs:{id:"语法分析与语法树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法分析与语法树","aria-hidden":"true"}},[t._v("#")]),t._v(" 语法分析与语法树")]),e("p",[t._v("在我们上一部分的词法分析中拿到了一个 tokens 数组，每个元素是一个 token 。这个 token 至少包含两个字段，一个是类型，另一个是内容。很多个这样的token组合在一起就是完整的源码。这个token 的数组，实际上是一个扁平的结构，这个扁平的结构最终会被我们处理成抽象的语法树。")]),e("ul",[e("li",[t._v("输入\n"),e("ul",[e("li",[t._v("Tokens 数组")])])]),e("li",[t._v("输出\n"),e("ul",[e("li",[t._v("抽象语法树 AST（Abstract Syntax Tree）")])])])]),e("h2",{attrs:{id:"语义分析与计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语义分析与计算","aria-hidden":"true"}},[t._v("#")]),t._v(" 语义分析与计算")]),e("ul",[e("li",[t._v("输入\n"),e("ul",[e("li",[t._v("AST 语法树")])])]),e("li",[t._v("输出\n"),e("ul",[e("li",[t._v("目标代码")])])])])])}],!1,null,null,null);a.default=v.exports}}]);